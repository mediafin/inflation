temperatuurdata_with_trendline %>%
select(date, EMXT, index) %>%
write.csv("export-temperatuurplot.csv", row.names=F)
temperatuurdata_with_trendline %>%
select(date, EMXT, trendline = value) %>%
write.csv("export-temperatuurplot.csv", row.names=F)
library(tidyverse)
library(readxl)
library(lubridate) #handling dates
library(DT) #html tables
#no scientific notation for numbers
options(scipen=999)
#Download cpi data (only enable when new download is needed)
download.file(url='https://statbel.fgov.be/sites/default/files/files/opendata/Indexen%20per%20productgroep/CPI%20All%20groups.xlsx', destfile="data/cpi.xlsx")
#read cpi-data
df_cpi_og <- read_excel("data/cpi.xlsx", sheet = 1, col_types = "text")
#select relevant columns and clean variable names
df_cpi <- df_cpi_og %>%
select(!contains(c("_FR_", "_EN_"))) %>%
mutate(
date = ymd(paste(NM_YR, NM_MTH, "1", sep="-")), #compose dates from year-month
MS_CPI_IDX = as.numeric(gsub(",", ".", MS_CPI_IDX)), #reformat numbers
MS_WT_CPI = as.numeric(gsub(",", ".", MS_WT_CPI)), #reformat weights
CD_COICOP = gsub("\\.", "", CD_COICOP), #reformat coicop-codes
NM_YR = as.numeric(NM_YR),
NM_MTH = as.numeric(NM_MTH),
MS_CPI_INFL = as.numeric(MS_CPI_INFL)*100
)
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
#make subset with december months of each year
df_dec_months <- df_cpi %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = NM_YR + 1
) %>%
select(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
df_unchained <- df_cpi %>%
select(CD_COICOP, date, NM_YR, NM_MTH, MS_CPI_IDX, MS_WT_CPI) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
#aggregate
df_agg_cpi_infl <- df_unchained %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, MS_WT_CPI) * (weighted.mean(IDX_DEC_Y_MINUS1, MS_WT_CPI) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
## official inflation
official_indices <- df_cpi %>%
filter(CD_COICOP == "-") %>%
select(date, NM_MTH, NM_YR, OFFICIAL_IDX = MS_CPI_IDX, OFFICIAL_INFL = MS_CPI_INFL)
## compare with reproduced inflation
compare_infl <- df_agg_cpi_infl %>%
filter(CD_COICOP == "-") %>%
left_join(official_indices, c("date","NM_MTH", "NM_YR"))
#table to compare official inflation
compare_infl %>%
select(date, OFFICIAL_INFL, REPRODUCED_INFL) %>%
arrange(desc(date)) %>%
datatable()
#plot both
compare_infl %>%
select(date, OFFICIAL_INFL, REPRODUCED_INFL) %>%
gather(type, value, -c(date, CD_COICOP)) %>%
ggplot(aes(x=date, y=value, col=type)) +
geom_line(alpha=0.5)
#Historische HBS-data binnenhalen
HBS_inc_2012 <- read_excel("data/HBO-2012-2014-2016.xls", sheet="HBS_Tab03_QRT_BE_2012", range="A5:Q1556")
HBS_inc_2014 <- read_excel("data/HBO-2012-2014-2016.xls", sheet="HBS_Tab03_QRT_BE_2014", range="A5:Q1556")
HBS_inc_2016 <- read_excel("data/HBO-2012-2014-2016.xls", sheet="HBS_Tab03_QRT_BE_2016", range="A5:Q1556")
HBS_inc_2018 <- read_excel("data/HBO-2018.xlsx", sheet="HBS_Tab03_QRT_BE_2018", range="A5:Q1556")
HBS_inc_2020 <- HBS_inc_2018
#Historische datasets bundelen
hbs_list_og <- list(
"HBS_inc_2012"= HBS_inc_2012,
"HBS_inc_2014"= HBS_inc_2014,
"HBS_inc_2016"= HBS_inc_2016,
"HBS_inc_2018"=HBS_inc_2018,
"HBS_inc_2020"=HBS_inc_2020
)
#datawrangling for all hbs dataframes in list
hbs_list <- lapply(seq_along(hbs_list_og), function(i){
#remove first row and assign current dataframe to variable
current_df <- hbs_list_og[[i]][-1, ]
#rename columns
names(current_df)[1:2] <- c("COICOP","desc")
names(current_df)[3:5] <- paste("TOTAL-", names(current_df)[3:5])
names(current_df)[6:8] <- paste("Q1-", names(current_df)[6:8])
names(current_df)[9:11] <- paste("Q2-", names(current_df)[9:11])
names(current_df)[12:14] <- paste("Q3-", names(current_df)[12:14])
names(current_df)[15:17] <- paste("Q4-", names(current_df)[15:17])
#gather data and clean variables
current_df <- current_df %>%
gather(category, value, -c(COICOP, desc)) %>%
separate(category, c("category", "indicator"), sep="-") %>%
mutate(
indicator = gsub("\\(â‚¬\\)", "", indicator),
indicator = gsub("\\.\\.\\.[0-9]+", "", indicator),
indicator = gsub("Gemiddelde uitgaven per huishouden en per jaar", "mean_exp", indicator),
indicator = gsub(" Aantal huishoudens \\(steekproef\\)", "n_households_sample", indicator),
indicator = gsub(" Aantal huishoudens \\(bevolking\\)", "n_households_pop", indicator),
indicator = trimws(indicator)
)
#add column name with year of hbs publication
current_df$hbs_year <- as.numeric(gsub("HBS_inc_","",names(hbs_list_og)[i]))
return(current_df)
}) #end of loop
#merge all historic hbs-dataframes in one single dataframe
df_hbs <- hbs_list %>%
bind_rows() %>%
mutate(
value = gsub("-", NA, value), #convert blank values to NA
value = as.numeric(value)
) %>%
filter(indicator == "mean_exp") %>% #only variable of interest is the mean expenditure
filter(!is.na(desc)) %>% #remove empty rows and metadata
mutate(COICOP_LVL = nchar(COICOP) - 1) #add variable to identify coicop-level
#list of hbs-categories included by nbb as found on:
#https://www.nbb.be/doc/ts/publications/economicreview/2020/ecoreviii2020_h6.pdf (footnote 2 on page 11)
include_selection <- read.csv("data/nbb-level2-products.csv", sep=";", stringsAsFactors = F, colClasses="character")
#additional products to be removed from subset
exclude_selection <- c(
"023", # drugs,
"122", #prostitution
"1251", #life insurance
"12530B", # hospital insurances
"12530C" # health insurance
)
#create searchquery for all product codes that are INCLUDED by nbb (AND ALL CHILD ELEMENTS!)
include_query <-  paste0("^(", paste(include_selection$COICOP, collapse = "|"), ")")
#create searchquery for all product codes that are REMOVED by nbb (AND ALL CHILD ELEMENTS!)
exclude_query <- paste0("^(", paste(exclude_selection, collapse = "|"), ")")
paste("include all product codes starting with:", include_query)
paste("exclude all product codes starting with:", exclude_query)
# include/exclude selection toepassen op hbs data
filtered_hbs <- df_hbs %>%
filter(str_detect(COICOP, include_query)) %>% #apply INCLUDE query
filter(!str_detect(COICOP, exclude_query)) %>%  #apply EXCLUDE query
filter(COICOP_LVL == 5) # Enkel producten op het diepste niveau
#summarize filtered hbs to coicop level 4
recalc_hbs <- filtered_hbs  %>%
mutate(
`4` = substr(COICOP, 1,5),
`3` = substr(COICOP, 1,4),
`2` = substr(COICOP, 1,3),
`1` = substr(COICOP, 1,2),
`0` = "-"
) %>%
gather("coicop_parent_lvl", "coicop_parent", -c(COICOP:COICOP_LVL)) %>%
group_by(coicop_parent, category, hbs_year) %>%
summarize(value = sum(value, na.rm=T)) %>%
filter(coicop_parent %in% include_selection$COICOP)
# Totale uitgaven per inkomensgroep
recalc_group_expenditure <- filtered_hbs %>%
group_by(category, hbs_year) %>%
summarize(recalc_total_group_expenditure = sum(value, na.rm=T))
#calculate relative weights from each product group in relation to total expenditure by income group
new_relative_hbs_weights <- recalc_hbs %>%
left_join(recalc_group_expenditure, by=c("category", "hbs_year")) %>%
rename("CD_COICOP" = "coicop_parent") %>%
group_by(CD_COICOP,category, hbs_year ) %>%
summarize(
wt_rescaled_inc_group = (value / recalc_total_group_expenditure)*1000
)
#Basisgegevens uit de CPI
#Gemiddelde cpi index in jaar van HBS-publicatie
coicop_yearly_mean_index <- df_cpi %>%
group_by(CD_COICOP, NM_YR) %>%
summarize(mean_cpi_idx_hbs_year = mean(MS_CPI_IDX, na.rm=T)) %>%
filter(NM_YR %in% unique(df_hbs$hbs_year)) %>%
select(hbs_year = NM_YR, CD_COICOP, mean_cpi_idx_hbs_year) %>%
filter(CD_COICOP != "-")
#CPI-index in dec van year-1
coicop_idx_dec <- df_cpi %>%
filter(NM_MTH == 12) %>%
filter(NM_YR >= 2017) %>%
rename("year_dec_value"="NM_YR") %>%
mutate(
hbs_year = ifelse(year_dec_value %% 2, year_dec_value - 1, year_dec_value - 2),
year_to_update = year_dec_value  + 1
) %>%
select(hbs_year, year_dec_value, year_to_update, CD_COICOP, cpi_idx_dec = MS_CPI_IDX) %>%
filter(CD_COICOP != "-")
#HOOP EXTRA BEREKENINGEN OM CIJFERS TE UNCHAINEN?
#STEP 1: GET CPI PER PRODUCT
step1 <- df_cpi %>%
filter(CD_COICOP %in% include_selection$COICOP) %>%
filter(date >= ymd("2017-12-01")) %>%
select(CD_COICOP, date, MS_CPI_IDX, NM_YR)
#STEP2: Evolutiescore tegenover december_year_minus_one
step2 <- step1 %>%
left_join(coicop_idx_dec,  by=c("NM_YR"="year_to_update", "CD_COICOP")) %>%
group_by(CD_COICOP) %>%
mutate(
factor = MS_CPI_IDX / cpi_idx_dec
)
#STEP3: Gewogen gemiddelde per datum volgens coicop-gewichten
step3 <- step2 %>%
left_join(new_relative_hbs_weights, by=c("hbs_year", "CD_COICOP")) %>%
group_by(category, date) %>%
summarize(weighted_factor = weighted.mean(factor, wt_rescaled_inc_group)) %>%
ungroup() %>%
filter(!is.na(category))
#STEP4: Decemberwaarden berekenen voor nieuwe index
step4 <- step3 %>%
filter(month(date) == 12) %>%
mutate(new_index = NA)
ls_new_index_for_dec <- list()
for(curr_category in unique(step4$category)){
temp1 <- step4 %>%
filter(category == curr_category) %>%
mutate(new_index = ifelse(year(date) == 2018, 100 * weighted_factor, NA))
temp1[nrow(temp1) + 1,] <- list(curr_category, ymd("2017-12-01"), 1, 100)
temp1[2,"new_index"] <- temp1[1,"new_index"]*temp1[1,"weighted_factor"]
temp1[3,"new_index"] <- temp1[2,"new_index"]*temp1[3,"weighted_factor"]
temp1[4,"new_index"] <- temp1[3,"new_index"]*temp1[4,"weighted_factor"]
ls_new_index_for_dec[[paste(curr_category)]] <- temp1
}
new_index_for_dec <- ls_new_index_for_dec %>%
bind_rows() %>%
mutate(
year_minus_one = year(date)
) %>%
select(year_minus_one, category, startindex = new_index)
#STEP5: Nieuwe indexen koppelen aan decembermaanden
step5 <- step3 %>%
mutate(
year_minus_one = year(date) -1
) %>%
left_join(new_index_for_dec, by=c("year_minus_one", "category")) %>%
mutate(
new_index = round(startindex * weighted_factor, 1)
) %>%
group_by(category) %>%
mutate(
inflation = (new_index / lag(new_index, 12) - 1)*100
)
#Bereken "update factor"
# Gewicht van getuige in HBS 2016 * [ (Index per getuige in december 2017 / Index per getuige in december 2016) / (Totale index in december 2017 / Totale index in december 2016) ]
update_factors <- coicop_yearly_mean_index %>%
left_join(total_yearly_mean_index,by=c("hbs_year")) %>%
left_join(coicop_idx_dec, by=c("hbs_year", "CD_COICOP")) %>%
left_join(total_idx_dec, by=c("hbs_year", "year_to_update", "year_dec_value")) %>%
mutate(
update_factor = (cpi_idx_dec / mean_cpi_idx_hbs_year) / (total_idx_dec / total_mean_cpi_idx_hbs_year)
) %>%
select(CD_COICOP, hbs_year, year_dec_value, year_to_update, update_factor ) %>%
mutate(
hbs_year = as.numeric(hbs_year),
year_dec_value = as.numeric(year_dec_value)
)
library(tidyverse)
library(readxl)
library(lubridate) #handling dates
library(DT) #html tables
#no scientific notation for numbers
options(scipen=999)
#Download cpi data (only enable when new download is needed)
download.file(url='https://statbel.fgov.be/sites/default/files/files/opendata/Indexen%20per%20productgroep/CPI%20All%20groups.xlsx', destfile="data/cpi.xlsx")
#read cpi-data
df_cpi_og <- read_excel("data/cpi.xlsx", sheet = 1, col_types = "text")
#select relevant columns and clean variable names
df_cpi <- df_cpi_og %>%
select(!contains(c("_FR_", "_EN_"))) %>%
mutate(
date = ymd(paste(NM_YR, NM_MTH, "1", sep="-")), #compose dates from year-month
MS_CPI_IDX = as.numeric(gsub(",", ".", MS_CPI_IDX)), #reformat numbers
MS_WT_CPI = as.numeric(gsub(",", ".", MS_WT_CPI)), #reformat weights
CD_COICOP = gsub("\\.", "", CD_COICOP), #reformat coicop-codes
NM_YR = as.numeric(NM_YR),
NM_MTH = as.numeric(NM_MTH),
MS_CPI_INFL = as.numeric(MS_CPI_INFL)*100
)
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
#make subset with december months of each year
df_dec_months <- df_cpi %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = NM_YR + 1
) %>%
select(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
df_unchained <- df_cpi %>%
select(CD_COICOP, date, NM_YR, NM_MTH, MS_CPI_IDX, MS_WT_CPI) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
#aggregate
df_agg_cpi_infl <- df_unchained %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, MS_WT_CPI) * (weighted.mean(IDX_DEC_Y_MINUS1, MS_WT_CPI) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
## official inflation
official_indices <- df_cpi %>%
filter(CD_COICOP == "-") %>%
select(date, NM_MTH, NM_YR, OFFICIAL_IDX = MS_CPI_IDX, OFFICIAL_INFL = MS_CPI_INFL)
## compare with reproduced inflation
compare_infl <- df_agg_cpi_infl %>%
filter(CD_COICOP == "-") %>%
left_join(official_indices, c("date","NM_MTH", "NM_YR"))
#table to compare official inflation
compare_infl %>%
select(date, OFFICIAL_INFL, REPRODUCED_INFL) %>%
arrange(desc(date)) %>%
datatable()
#plot both
compare_infl %>%
select(date, OFFICIAL_INFL, REPRODUCED_INFL) %>%
gather(type, value, -c(date, CD_COICOP)) %>%
ggplot(aes(x=date, y=value, col=type)) +
geom_line(alpha=0.5)
#Historische HBS-data binnenhalen
HBS_inc_2012 <- read_excel("data/HBO-2012-2014-2016.xls", sheet="HBS_Tab03_QRT_BE_2012", range="A5:Q1556")
HBS_inc_2014 <- read_excel("data/HBO-2012-2014-2016.xls", sheet="HBS_Tab03_QRT_BE_2014", range="A5:Q1556")
HBS_inc_2016 <- read_excel("data/HBO-2012-2014-2016.xls", sheet="HBS_Tab03_QRT_BE_2016", range="A5:Q1556")
HBS_inc_2018 <- read_excel("data/HBO-2018.xlsx", sheet="HBS_Tab03_QRT_BE_2018", range="A5:Q1556")
HBS_inc_2020 <- HBS_inc_2018
#Historische datasets bundelen
hbs_list_og <- list(
"HBS_inc_2012"= HBS_inc_2012,
"HBS_inc_2014"= HBS_inc_2014,
"HBS_inc_2016"= HBS_inc_2016,
"HBS_inc_2018"=HBS_inc_2018,
"HBS_inc_2020"=HBS_inc_2020
)
#datawrangling for all hbs dataframes in list
hbs_list <- lapply(seq_along(hbs_list_og), function(i){
#remove first row and assign current dataframe to variable
current_df <- hbs_list_og[[i]][-1, ]
#rename columns
names(current_df)[1:2] <- c("COICOP","desc")
names(current_df)[3:5] <- paste("TOTAL-", names(current_df)[3:5])
names(current_df)[6:8] <- paste("Q1-", names(current_df)[6:8])
names(current_df)[9:11] <- paste("Q2-", names(current_df)[9:11])
names(current_df)[12:14] <- paste("Q3-", names(current_df)[12:14])
names(current_df)[15:17] <- paste("Q4-", names(current_df)[15:17])
#gather data and clean variables
current_df <- current_df %>%
gather(category, value, -c(COICOP, desc)) %>%
separate(category, c("category", "indicator"), sep="-") %>%
mutate(
indicator = gsub("\\(â‚¬\\)", "", indicator),
indicator = gsub("\\.\\.\\.[0-9]+", "", indicator),
indicator = gsub("Gemiddelde uitgaven per huishouden en per jaar", "mean_exp", indicator),
indicator = gsub(" Aantal huishoudens \\(steekproef\\)", "n_households_sample", indicator),
indicator = gsub(" Aantal huishoudens \\(bevolking\\)", "n_households_pop", indicator),
indicator = trimws(indicator)
)
#add column name with year of hbs publication
current_df$hbs_year <- as.numeric(gsub("HBS_inc_","",names(hbs_list_og)[i]))
return(current_df)
}) #end of loop
#merge all historic hbs-dataframes in one single dataframe
df_hbs <- hbs_list %>%
bind_rows() %>%
mutate(
value = gsub("-", NA, value), #convert blank values to NA
value = as.numeric(value)
) %>%
filter(indicator == "mean_exp") %>% #only variable of interest is the mean expenditure
filter(!is.na(desc)) %>% #remove empty rows and metadata
mutate(COICOP_LVL = nchar(COICOP) - 1) #add variable to identify coicop-level
#list of hbs-categories included by nbb as found on:
#https://www.nbb.be/doc/ts/publications/economicreview/2020/ecoreviii2020_h6.pdf (footnote 2 on page 11)
include_selection <- read.csv("data/nbb-level2-products.csv", sep=";", stringsAsFactors = F, colClasses="character")
#additional products to be removed from subset
exclude_selection <- c(
"023", # drugs,
"122", #prostitution
"1251", #life insurance
"12530B", # hospital insurances
"12530C" # health insurance
)
#create searchquery for all product codes that are INCLUDED by nbb (AND ALL CHILD ELEMENTS!)
include_query <-  paste0("^(", paste(include_selection$COICOP, collapse = "|"), ")")
#create searchquery for all product codes that are REMOVED by nbb (AND ALL CHILD ELEMENTS!)
exclude_query <- paste0("^(", paste(exclude_selection, collapse = "|"), ")")
paste("include all product codes starting with:", include_query)
paste("exclude all product codes starting with:", exclude_query)
# include/exclude selection toepassen op hbs data
filtered_hbs <- df_hbs %>%
filter(str_detect(COICOP, include_query)) %>% #apply INCLUDE query
filter(!str_detect(COICOP, exclude_query)) %>%  #apply EXCLUDE query
filter(COICOP_LVL == 5) # Enkel producten op het diepste niveau
#summarize filtered hbs to coicop level 4
recalc_hbs <- filtered_hbs  %>%
mutate(
`4` = substr(COICOP, 1,5),
`3` = substr(COICOP, 1,4),
`2` = substr(COICOP, 1,3),
`1` = substr(COICOP, 1,2),
`0` = "-"
) %>%
gather("coicop_parent_lvl", "coicop_parent", -c(COICOP:COICOP_LVL)) %>%
group_by(coicop_parent, category, hbs_year) %>%
summarize(value = sum(value, na.rm=T)) %>%
filter(coicop_parent %in% include_selection$COICOP)
# Totale uitgaven per inkomensgroep
recalc_group_expenditure <- filtered_hbs %>%
group_by(category, hbs_year) %>%
summarize(recalc_total_group_expenditure = sum(value, na.rm=T))
#calculate relative weights from each product group in relation to total expenditure by income group
new_relative_hbs_weights <- recalc_hbs %>%
left_join(recalc_group_expenditure, by=c("category", "hbs_year")) %>%
rename("CD_COICOP" = "coicop_parent") %>%
group_by(CD_COICOP,category, hbs_year ) %>%
summarize(
wt_rescaled_inc_group = (value / recalc_total_group_expenditure)*1000
)
#Basisgegevens uit de CPI
#Gemiddelde cpi index in jaar van HBS-publicatie
coicop_yearly_mean_index <- df_cpi %>%
group_by(CD_COICOP, NM_YR) %>%
summarize(mean_cpi_idx_hbs_year = mean(MS_CPI_IDX, na.rm=T)) %>%
filter(NM_YR %in% unique(df_hbs$hbs_year)) %>%
select(hbs_year = NM_YR, CD_COICOP, mean_cpi_idx_hbs_year) %>%
filter(CD_COICOP != "-")
#CPI-index in dec van year-1
coicop_idx_dec <- df_cpi %>%
filter(NM_MTH == 12) %>%
filter(NM_YR >= 2017) %>%
rename("year_dec_value"="NM_YR") %>%
mutate(
hbs_year = ifelse(year_dec_value %% 2, year_dec_value - 1, year_dec_value - 2),
year_to_update = year_dec_value  + 1
) %>%
select(hbs_year, year_dec_value, year_to_update, CD_COICOP, cpi_idx_dec = MS_CPI_IDX) %>%
filter(CD_COICOP != "-")
#HOOP EXTRA BEREKENINGEN OM CIJFERS TE UNCHAINEN?
#STEP 1: GET CPI PER PRODUCT
step1 <- df_cpi %>%
filter(CD_COICOP %in% include_selection$COICOP) %>%
filter(date >= ymd("2017-12-01")) %>%
select(CD_COICOP, date, MS_CPI_IDX, NM_YR)
#STEP2: Evolutiescore tegenover december_year_minus_one
step2 <- step1 %>%
left_join(coicop_idx_dec,  by=c("NM_YR"="year_to_update", "CD_COICOP")) %>%
group_by(CD_COICOP) %>%
mutate(
factor = MS_CPI_IDX / cpi_idx_dec
)
#STEP3: Gewogen gemiddelde per datum volgens coicop-gewichten
step3 <- step2 %>%
left_join(new_relative_hbs_weights, by=c("hbs_year", "CD_COICOP")) %>%
group_by(category, date) %>%
summarize(weighted_factor = weighted.mean(factor, wt_rescaled_inc_group)) %>%
ungroup() %>%
filter(!is.na(category))
#STEP4: Decemberwaarden berekenen voor nieuwe index
step4 <- step3 %>%
filter(month(date) == 12) %>%
mutate(new_index = NA)
ls_new_index_for_dec <- list()
for(curr_category in unique(step4$category)){
temp1 <- step4 %>%
filter(category == curr_category) %>%
mutate(new_index = ifelse(year(date) == 2018, 100 * weighted_factor, NA))
temp1[nrow(temp1) + 1,] <- list(curr_category, ymd("2017-12-01"), 1, 100)
temp1[2,"new_index"] <- temp1[1,"new_index"]*temp1[1,"weighted_factor"]
temp1[3,"new_index"] <- temp1[2,"new_index"]*temp1[3,"weighted_factor"]
temp1[4,"new_index"] <- temp1[3,"new_index"]*temp1[4,"weighted_factor"]
ls_new_index_for_dec[[paste(curr_category)]] <- temp1
}
new_index_for_dec <- ls_new_index_for_dec %>%
bind_rows() %>%
mutate(
year_minus_one = year(date)
) %>%
select(year_minus_one, category, startindex = new_index)
#STEP5: Nieuwe indexen koppelen aan decembermaanden
step5 <- step3 %>%
mutate(
year_minus_one = year(date) -1
) %>%
left_join(new_index_for_dec, by=c("year_minus_one", "category")) %>%
mutate(
new_index = round(startindex * weighted_factor, 1)
) %>%
group_by(category) %>%
mutate(
inflation = (new_index / lag(new_index, 12) - 1)*100
)
#Bereken "update factor"
# Gewicht van getuige in HBS 2016 * [ (Index per getuige in december 2017 / Index per getuige in december 2016) / (Totale index in december 2017 / Totale index in december 2016) ]
update_factors <- coicop_yearly_mean_index %>%
left_join(total_yearly_mean_index,by=c("hbs_year")) %>%
left_join(coicop_idx_dec, by=c("hbs_year", "CD_COICOP")) %>%
left_join(total_idx_dec, by=c("hbs_year", "year_to_update", "year_dec_value")) %>%
mutate(
update_factor = (cpi_idx_dec / mean_cpi_idx_hbs_year) / (total_idx_dec / total_mean_cpi_idx_hbs_year)
) %>%
select(CD_COICOP, hbs_year, year_dec_value, year_to_update, update_factor ) %>%
mutate(
hbs_year = as.numeric(hbs_year),
year_dec_value = as.numeric(year_dec_value)
)
