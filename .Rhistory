max = max(updated_wt, na.rm=T),
) %>%
ungroup() %>%
mutate(
updated_wt = (updated_wt / max) *1000
) %>%
select(-max)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_weights_coicop3 %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
updated_weights <- new_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>% #update factor toepassen
filter(!is.na(updated_wt))  %>%
ungroup() %>%
group_by(year_to_update, category) %>%  #rescale to 1000
mutate(
total = sum(updated_wt, na.rm=T)
) %>%
ungroup() %>%
mutate(
nw_wt = (updated_wt / total)*1000,
) %>%
select(CD_COICOP, category, year = year_to_update, updated_wt) %>%
group_by(year, category) %>%
mutate(
max = max(updated_wt, na.rm=T),
) %>%
ungroup() %>%
mutate(
updated_wt = (updated_wt / max) *1000
) %>%
select(-max)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
distinct(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, category) %>%
mutate(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(category) %>%
mutate(
REPRODUCED_INFL = round((REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100, 2)
)
df_agg_cpi_infl_incomegroup %>%
#filter(CD_COICOP == "-") %>%
#filter(category == "TOTAL") %>%
arrange(desc(date)) %>%
View()
#Gemiddelde cpi index in jaar van HBS-publicatie
yearly_mean_index <- df_cpi %>%
group_by(CD_COICOP, NM_YR) %>%
summarize(mean_cpi_idx_hbs_year = mean(MS_CPI_IDX, na.rm=T)) %>%
filter(NM_YR %in% unique(df_hbs$hbs_year)) %>%
select(hbs_year = NM_YR, CD_COICOP, mean_cpi_idx_hbs_year)
#CPI-index in Year-1
idx_dec <- df_cpi %>%
filter(NM_MTH == 12) %>%
filter(NM_YR >= 2012) %>%
rename("year_dec_value"="NM_YR") %>%
mutate(
hbs_year = ifelse(year_dec_value %% 2, year_dec_value - 1, year_dec_value - 2),
year_to_update = year_dec_value  + 1
) %>%
select(hbs_year, year_dec_value, year_to_update, CD_COICOP, cpi_idx_dec = MS_CPI_IDX)
#Bereken "update factor"
update_factors <- yearly_mean_index %>%
left_join(idx_dec, by=c("hbs_year", "CD_COICOP")) %>%
mutate(
update_factor = cpi_idx_dec / mean_cpi_idx_hbs_year
) %>%
select(CD_COICOP, hbs_year, year_dec_value, year_to_update, update_factor ) %>%
mutate(
hbs_year = as.numeric(hbs_year),
year_dec_value = as.numeric(year_dec_value)
)
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>% #update factor toepassen
filter(!is.na(updated_wt))
# include/exclude selection toepassen op hbs data
filtered_hbs <- df_hbs %>%
filter(str_detect(COICOP, include_query)) %>% #apply INCLUDE query
filter(!str_detect(COICOP, exclude_query)) %>%  #apply EXCLUDE query
filter(COICOP_LVL == 5) # Enkel producten op het diepste niveau
#summarize filtered hbs to coicop level 4
recalc_hbs <- filtered_hbs %>%
mutate(
`4` = substr(COICOP, 1,5),
`3` = substr(COICOP, 1,4),
`2` = substr(COICOP, 1,3),
`1` = substr(COICOP, 1,2),
`0` = "-"
) %>%
gather("coicop_parent_lvl", "coicop_parent", -c(COICOP:COICOP_LVL)) %>%
group_by(coicop_parent, category, hbs_year) %>%
summarize(value = sum(value, na.rm=T))
# Totale uitgaven per inkomensgroep
recalc_group_expenditure <- filtered_hbs %>%
group_by(category, hbs_year) %>%
summarize(recalc_total_group_expenditure = sum(value, na.rm=T))
#calculate relative weights from each product group in relation to total expenditure by income group
new_relative_hbs_weights <- recalc_hbs %>%
left_join(recalc_group_expenditure, by=c("category", "hbs_year")) %>%
rename("CD_COICOP" = "coicop_parent") %>%
group_by(CD_COICOP,category, hbs_year ) %>%
summarize(
nw_wt = (value / recalc_total_group_expenditure)*1000
)
#Gemiddelde cpi index in jaar van HBS-publicatie
yearly_mean_index <- df_cpi %>%
group_by(CD_COICOP, NM_YR) %>%
summarize(mean_cpi_idx_hbs_year = mean(MS_CPI_IDX, na.rm=T)) %>%
filter(NM_YR %in% unique(df_hbs$hbs_year)) %>%
select(hbs_year = NM_YR, CD_COICOP, mean_cpi_idx_hbs_year)
#CPI-index in Year-1
idx_dec <- df_cpi %>%
filter(NM_MTH == 12) %>%
filter(NM_YR >= 2012) %>%
rename("year_dec_value"="NM_YR") %>%
mutate(
hbs_year = ifelse(year_dec_value %% 2, year_dec_value - 1, year_dec_value - 2),
year_to_update = year_dec_value  + 1
) %>%
select(hbs_year, year_dec_value, year_to_update, CD_COICOP, cpi_idx_dec = MS_CPI_IDX)
#Bereken "update factor"
update_factors <- yearly_mean_index %>%
left_join(idx_dec, by=c("hbs_year", "CD_COICOP")) %>%
mutate(
update_factor = cpi_idx_dec / mean_cpi_idx_hbs_year
) %>%
select(CD_COICOP, hbs_year, year_dec_value, year_to_update, update_factor ) %>%
mutate(
hbs_year = as.numeric(hbs_year),
year_dec_value = as.numeric(year_dec_value)
)
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>% #update factor toepassen
filter(!is.na(updated_wt))
#update factor toepassen
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_resclaed_weights <- updated_weights %>%
ungroup() %>%
group_by(year_to_update, category) %>%
mutate(
total = sum(updated_wt, na.rm=T) #calculate total
) %>%
ungroup() %>%
mutate(
nw_wt = (updated_wt / total)*1000,
) %>%
select(CD_COICOP, category, year = year_to_update, updated_wt) %>%
group_by(year, category) %>%
mutate(
max = max(updated_wt, na.rm=T),
) %>%
ungroup() %>%
mutate(
updated_wt = (updated_wt / max) *1000
) %>%
select(-max)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
#update factor toepassen
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_rescaled_weights <- updated_weights %>%
ungroup() %>%
group_by(year_to_update, category) %>%
mutate(
total = sum(updated_wt, na.rm=T) #calculate total
) %>%
ungroup() %>%
mutate(
nw_wt = (updated_wt / total)*1000,
) %>%
select(CD_COICOP, category, year = year_to_update, updated_wt) %>%
group_by(year, category) %>%
mutate(
max = max(updated_wt, na.rm=T),
) %>%
ungroup() %>%
mutate(
updated_wt = (updated_wt / max) *1000
) %>%
select(-max)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_and_rescaled_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
View(updated_weights)
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = sum(updated_wt, na.rm=T) #calculate total
)
View(updated_and_rescaled_weights)
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = sum(updated_wt, na.rm=T) #calculate total
) %>%
ungroup() %>%
mutate(
nw_wt = (updated_wt / total)*1000,
)
View(updated_and_rescaled_weights)
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = max(updated_wt, na.rm=T) #calculate total
)
View(updated_and_rescaled_weights)
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = max(updated_wt, na.rm=T), #calculate total
nw_wt = (updated_wt / total)*1000
)
View(updated_and_rescaled_weights)
#update factor toepassen
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = max(updated_wt, na.rm=T), #calculate total
nw_wt = (updated_wt / total)*1000
) %>%
select(CD_COICOP, category, year = year_to_update, updated_wt)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_and_rescaled_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
#update factor toepassen
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = max(updated_wt, na.rm=T), #calculate total
nw_wt = (updated_wt / total)*1000
) %>%
select(CD_COICOP, category, year = year_to_update, updated_wt)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_and_rescaled_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
#update factor toepassen
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = max(updated_wt, na.rm=T), #calculate total
nw_wt = (updated_wt / total)*1000
) %>%
select(CD_COICOP, category, year = year_to_update, updated_wt)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_and_rescaled_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
View(df_merged_cpi_hbs)
#update factor toepassen
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = max(updated_wt, na.rm=T), #calculate total
nw_wt = (updated_wt / total)*1000
) %>%
select(CD_COICOP, category, year = year_to_update, updated_wt)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_and_rescaled_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
View(updated_and_rescaled_weights)
#update factor toepassen
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = max(updated_wt, na.rm=T), #calculate total
nw_wt = (updated_wt / total)*1000
) %>%
select(CD_COICOP, category, year = year_to_update, nw_wt)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge rescaled and updated hbs-data with cpi data
df_merged_cpi_hbs <- updated_and_rescaled_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
distinct(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
distinct(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, nw_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, category) %>%
mutate(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, nw_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, nw_wt) / 100)
) %>%
ungroup() %>%
group_by(category) %>%
mutate(
REPRODUCED_INFL = round((REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100, 2)
)
#update factor toepassen
updated_weights <- new_relative_hbs_weights %>%
left_join(update_factors, by=c("CD_COICOP", "hbs_year")) %>%
mutate(updated_wt = nw_wt * update_factor) %>%
filter(!is.na(updated_wt))
#Herschalen naar 1000
updated_and_rescaled_weights <- updated_weights %>%
group_by(year_to_update, category) %>%
mutate(
total = max(updated_wt, na.rm=T), #calculate total
nw_wt = (updated_wt / total)*1000
) %>%
select(CD_COICOP, category, year = year_to_update, nw_wt)
#make clean copy of original cpi dataframe before merge
df_cpi_for_merge <- df_cpi %>%
select(date, NM_YR, NM_MTH, CD_COICOP, NM_CD_COICOP_LVL, MS_CPI_IDX, MS_WT_CPI)
#merge updated and rescaled hbs-data with cpi data
df_merged_cpi_hbs <- updated_and_rescaled_weights %>%
left_join(df_cpi_for_merge, by=c("CD_COICOP", "year" = "NM_YR"))
View(df_merged_cpi_hbs)
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
distinct(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, nw_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, category) %>%
mutate(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, nw_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, nw_wt) / 100)
) %>%
ungroup() %>%
group_by(category) %>%
mutate(
REPRODUCED_INFL = round((REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100, 2)
)
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, nw_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
View(df_unchained_incomegroup)
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
distinct(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, nw_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, category) %>%
mutate(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, nw_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, nw_wt) / 100)
) %>%
ungroup() %>%
group_by(category) %>%
mutate(
REPRODUCED_INFL = round((REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100, 2)
)
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
distinct(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, nw_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, category) %>%
mutate(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, nw_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, nw_wt) / 100)
) %>%
ungroup() %>%
group_by(category) %>%
mutate(
REPRODUCED_INFL = round((REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100, 2)
)
View(df_agg_cpi_infl_incomegroup)
