group_by(category, CD_COICOP) %>%
mutate(
inflation = ( (NEW_IDX / lag(NEW_IDX, 12) - 1)*100)
)
df_agg_cpi_incomegroups %>%
select(-NEW_IDX) %>%
spread(category, inflation) %>%
select(year, NM_MTH, TOTAL, everything()) %>%
arrange(desc(year), desc(NM_MTH)) %>%
datatable()
df_agg_cpi_incomegroups %>%
select(-NEW_IDX) %>%
spread(category, inflation) %>%
select(year, NM_MTH, TOTAL, everything()) %>%
arrange(desc(year), desc(NM_MTH)) %>%
View()
temp_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
year = year + 1
) %>%
select(CD_COICOP,category, year, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
df_unchained_incomegroups <- df_merged_cpi_hbs %>%
mutate(
NM_MTH = month(date)
) %>%
select(CD_COICOP, year, NM_MTH, MS_CPI_IDX, updated_wt, category) %>%
left_join(dec_months, by=c("year" = "year", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category, CD_COICOP) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(category, CD_COICOP) %>%
mutate(
inflation = round(( (NEW_IDX / lag(NEW_IDX, 12) - 1)*100), 2)
)
df_agg_cpi_incomegroups %>%
select(-NEW_IDX) %>%
spread(category, inflation) %>%
select(year, NM_MTH, TOTAL, everything()) %>%
arrange(desc(year), desc(NM_MTH)) %>%
View()
temp_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
year = year + 1
) %>%
select(CD_COICOP,category, year, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
df_unchained_incomegroups <- df_merged_cpi_hbs %>%
mutate(
NM_MTH = month(date)
) %>%
select(CD_COICOP, year, NM_MTH, MS_CPI_IDX, updated_wt, category) %>%
left_join(dec_months, by=c("year" = "year", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category, CD_COICOP) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(category, CD_COICOP, category) %>%
mutate(
inflation = round(( (NEW_IDX / lag(NEW_IDX, 12) - 1)*100), 2)
)
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category, CD_COICOP) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(category, CD_COICOP) %>%
mutate(
inflation = round(( (NEW_IDX / lag(NEW_IDX, 12) - 1)*100), 2)
)
View(df_agg_cpi_incomegroups)
temp_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
year = year + 1
) %>%
select(CD_COICOP,category, year, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
df_unchained_incomegroups <- df_merged_cpi_hbs %>%
mutate(
NM_MTH = month(date)
) %>%
select(CD_COICOP, year, NM_MTH, MS_CPI_IDX, updated_wt, category) %>%
left_join(temp_dec_months, by=c("year" = "year", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category, CD_COICOP) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(category, CD_COICOP) %>%
mutate(
inflation = round(( (NEW_IDX / lag(NEW_IDX, 12) - 1)*100), 2)
)
df_agg_cpi_incomegroups %>%
select(-NEW_IDX) %>%
spread(category, inflation) %>%
select(year, NM_MTH, TOTAL, everything()) %>%
arrange(desc(year), desc(NM_MTH)) %>%
View()
View(temp_dec_months)
temp_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
year = year + 1
) %>%
select(CD_COICOP,category, year, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
df_unchained_incomegroups <- df_merged_cpi_hbs %>%
mutate(
NM_MTH = month(date)
) %>%
select(CD_COICOP, year, NM_MTH, MS_CPI_IDX, updated_wt, category) %>%
left_join(temp_dec_months, by=c("year" = "year", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
View(df_unchained_incomegroups)
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category, CD_COICOP) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
)
View(df_agg_cpi_incomegroups)
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category, CD_COICOP) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup()
View(df_agg_cpi_incomegroups)
View(df_unchained_incomegroups)
temp_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
year = year + 1
) %>%
select(CD_COICOP,category, year, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
df_unchained_incomegroups <- df_merged_cpi_hbs %>%
mutate(
NM_MTH = month(date)
) %>%
select(CD_COICOP, year, NM_MTH, MS_CPI_IDX, updated_wt, category) %>%
left_join(temp_dec_months, by=c("year" = "year", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(category, CD_COICOP) %>%
mutate(
inflation = round(( (NEW_IDX / lag(NEW_IDX, 12) - 1)*100), 2)
)
temp_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
year = year + 1
) %>%
select(CD_COICOP,category, year, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
df_unchained_incomegroups <- df_merged_cpi_hbs %>%
mutate(
NM_MTH = month(date)
) %>%
select(CD_COICOP, year, NM_MTH, MS_CPI_IDX, updated_wt, category) %>%
left_join(temp_dec_months, by=c("year" = "year", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(category) %>%
mutate(
inflation = round(( (NEW_IDX / lag(NEW_IDX, 12) - 1)*100), 2)
)
df_agg_cpi_incomegroups %>%
select(-NEW_IDX) %>%
spread(category, inflation) %>%
select(year, NM_MTH, TOTAL, everything()) %>%
arrange(desc(year), desc(NM_MTH)) %>%
View()
df_agg_cpi_incomegroups <- df_unchained_incomegroups %>%
group_by(year, NM_MTH, category) %>%
summarize(
NEW_IDX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(category) %>%
mutate(
inflation = round(( (NEW_IDX / lag(NEW_IDX, 12) - 1)*100), 2)
)
View(df_agg_cpi_incomegroups)
View(df_merged_cpi_hbs)
df_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = NM_YR + 1
) %>%
select(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#make subset with december months of each year
df_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained <- df_cpi %>%
select(CD_COICOP, date, NM_YR, NM_MTH, MS_CPI_IDX, MS_WT_CPI, CD_COICOP) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl <- df_unchained %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, MS_WT_CPI) * (weighted.mean(IDX_DEC_Y_MINUS1, MS_WT_CPI) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
df_unchained <- df_merged_cpi_hbs %>%
select(CD_COICOP, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt, CD_COICOP) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
View(df_merged_cpi_hbs)
df_unchained <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
df_unchained <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt)
df_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
df_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP", "category"))
#make subset with december months of each year
df_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#make subset with december months of each year
df_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl <- df_unchained %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP, category) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, MS_WT_CPI) * (weighted.mean(IDX_DEC_Y_MINUS1, MS_WT_CPI) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP, category) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
df_agg_cpi_infl <- df_unchained %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP, category) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, MS_WT_CPI) * (weighted.mean(IDX_DEC_Y_MINUS1, MS_WT_CPI) / 100)
)
#make subset with december months of each year
df_dec_months <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl <- df_unchained %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP, category) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP, category) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
View(df_agg_cpi_infl)
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP, category) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP, category) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP, category) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
)
View(df_agg_cpi_infl_incomegroup)
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP, category) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
)
View(df_agg_cpi_infl_incomegroup)
View(df_unchained_incomegroup)
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
)
View(df_agg_cpi_infl_incomegroup)
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP, category) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
View(df_unchained_incomegroup)
#make subset with december months of each year
df_dec_months <- df_cpi %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = NM_YR + 1
) %>%
select(CD_COICOP, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained <- df_cpi %>%
select(CD_COICOP, date, NM_YR, NM_MTH, MS_CPI_IDX, MS_WT_CPI, CD_COICOP) %>%
left_join(df_dec_months, by=c("NM_YR", "CD_COICOP")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl <- df_unchained %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, MS_WT_CPI) * (weighted.mean(IDX_DEC_Y_MINUS1, MS_WT_CPI) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
View(df_unchained)
weighted.mean(c(103.9707
), c(0.7927123)) * (weighted.mean(c(106.9127
), c(0.7927123
)) / 100)
View(df_unchained_incomegroup)
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP, category) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP, category) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
View(df_agg_cpi_infl_incomegroup)
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
View(df_dec_months_incomegroup)
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
View(df_unchained_incomegroup)
#make subset with december months of each year
df_dec_months_incomegroup <- df_merged_cpi_hbs %>%
filter(NM_MTH == 12) %>%
mutate(
NM_YR = year + 1
) %>%
select(CD_COICOP,category, NM_YR, IDX_DEC_Y_MINUS1 = MS_CPI_IDX)
#unchain
#Om de CPI te herrekenen uit gepubliceerde cijfers moet je de indices in basis 2013 telkens unchainen. Dit wil zeggen dat je de indices van het lopende jaar op het laagste niveau telkens moet uitdrukken t.o.v. december van het voorgaande jaar
df_unchained_incomegroup <- df_merged_cpi_hbs %>%
select(CD_COICOP, category, date, NM_YR = year, NM_MTH, MS_CPI_IDX, updated_wt) %>%
left_join(df_dec_months_incomegroup, by=c("NM_YR", "CD_COICOP", "category")) %>%
mutate(
MS_CPI_IDX_ADJ = (MS_CPI_IDX / IDX_DEC_Y_MINUS1)*100
)
#aggregate
#Vervolgens dien je deze unchained indices te aggregeren. Het bekomen resultaat kan gekoppeld worden aan de december index uitgedrukt in basis 2013=100. Op deze manier wordt de lange reeks van indexcijfers in basis 2013 = 100  bekomen.
df_agg_cpi_infl_incomegroup <- df_unchained_incomegroup %>%
group_by(date, NM_YR, NM_MTH, CD_COICOP, category) %>%
summarize(
REPRODUCED_INDEX = weighted.mean(MS_CPI_IDX_ADJ, updated_wt) * (weighted.mean(IDX_DEC_Y_MINUS1, updated_wt) / 100)
) %>%
ungroup() %>%
group_by(CD_COICOP, category) %>%
mutate(
REPRODUCED_INFL = (REPRODUCED_INDEX / lag(REPRODUCED_INDEX, 12) - 1)*100
)
